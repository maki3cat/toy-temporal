// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: api/workflow.proto

package workflow

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WorkflowExecutionClient is the client API for WorkflowExecution service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorkflowExecutionClient interface {
	StartWorkflowExecution(ctx context.Context, in *StartWorkflowExecutionRequest, opts ...grpc.CallOption) (*StartWorkflowExecutionResponse, error)
}

type workflowExecutionClient struct {
	cc grpc.ClientConnInterface
}

func NewWorkflowExecutionClient(cc grpc.ClientConnInterface) WorkflowExecutionClient {
	return &workflowExecutionClient{cc}
}

func (c *workflowExecutionClient) StartWorkflowExecution(ctx context.Context, in *StartWorkflowExecutionRequest, opts ...grpc.CallOption) (*StartWorkflowExecutionResponse, error) {
	out := new(StartWorkflowExecutionResponse)
	err := c.cc.Invoke(ctx, "/toy.temporal.api.workflow.WorkflowExecution/StartWorkflowExecution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkflowExecutionServer is the server API for WorkflowExecution service.
// All implementations must embed UnimplementedWorkflowExecutionServer
// for forward compatibility
type WorkflowExecutionServer interface {
	StartWorkflowExecution(context.Context, *StartWorkflowExecutionRequest) (*StartWorkflowExecutionResponse, error)
	mustEmbedUnimplementedWorkflowExecutionServer()
}

// UnimplementedWorkflowExecutionServer must be embedded to have forward compatible implementations.
type UnimplementedWorkflowExecutionServer struct {
}

func (UnimplementedWorkflowExecutionServer) StartWorkflowExecution(context.Context, *StartWorkflowExecutionRequest) (*StartWorkflowExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartWorkflowExecution not implemented")
}
func (UnimplementedWorkflowExecutionServer) mustEmbedUnimplementedWorkflowExecutionServer() {}

// UnsafeWorkflowExecutionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorkflowExecutionServer will
// result in compilation errors.
type UnsafeWorkflowExecutionServer interface {
	mustEmbedUnimplementedWorkflowExecutionServer()
}

func RegisterWorkflowExecutionServer(s grpc.ServiceRegistrar, srv WorkflowExecutionServer) {
	s.RegisterService(&WorkflowExecution_ServiceDesc, srv)
}

func _WorkflowExecution_StartWorkflowExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartWorkflowExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkflowExecutionServer).StartWorkflowExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/toy.temporal.api.workflow.WorkflowExecution/StartWorkflowExecution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkflowExecutionServer).StartWorkflowExecution(ctx, req.(*StartWorkflowExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorkflowExecution_ServiceDesc is the grpc.ServiceDesc for WorkflowExecution service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorkflowExecution_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "toy.temporal.api.workflow.WorkflowExecution",
	HandlerType: (*WorkflowExecutionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartWorkflowExecution",
			Handler:    _WorkflowExecution_StartWorkflowExecution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/workflow.proto",
}
